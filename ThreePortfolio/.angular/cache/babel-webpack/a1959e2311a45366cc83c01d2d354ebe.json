{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let ScrollSpyDirective = /*#__PURE__*/(() => {\n  class ScrollSpyDirective {\n    constructor(_el) {\n      this._el = _el;\n      this.spiedTags = [];\n      this.sectionChange = new EventEmitter();\n    }\n\n    onScroll(event) {\n      let currentSection;\n      const children = this._el.nativeElement.children;\n      const scrollTop = event.target.scrollTop;\n      const parentOffset = event.target.offsetTop;\n\n      for (let i = 0; i < children.length; i++) {\n        const element = children[i];\n\n        if (this.spiedTags.some(spiedTag => spiedTag === element.tagName)) {\n          if (element.offsetTop - 1 - parentOffset <= scrollTop) {\n            currentSection = element.id;\n          }\n        }\n      }\n\n      if (currentSection !== this.currentSection) {\n        this.currentSection = currentSection;\n        this.sectionChange.emit(this.currentSection);\n      }\n    }\n\n  }\n\n  ScrollSpyDirective.ɵfac = function ScrollSpyDirective_Factory(t) {\n    return new (t || ScrollSpyDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ScrollSpyDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ScrollSpyDirective,\n    selectors: [[\"\", \"ScrollSpy\", \"\"]],\n    hostBindings: function ScrollSpyDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"scroll\", function ScrollSpyDirective_scroll_HostBindingHandler($event) {\n          return ctx.onScroll($event);\n        });\n      }\n    },\n    inputs: {\n      spiedTags: \"spiedTags\"\n    },\n    outputs: {\n      sectionChange: \"sectionChange\"\n    }\n  });\n  return ScrollSpyDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}