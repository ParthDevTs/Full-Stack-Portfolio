{"ast":null,"code":"(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n  /**\n   * Plugin name which is used as a class name for <pre> which is activating the plugin\n   * @type {String}\n   */\n\n\n  var PLUGIN_NAME = 'line-numbers';\n  /**\n   * Regular expression used for determining line breaks\n   * @type {RegExp}\n   */\n\n  var NEW_LINE_EXP = /\\n(?!$)/g;\n  /**\n   * Resizes line numbers spans according to height of line of code\n   * @param {Element} element <pre> element\n   */\n\n  var _resizeElement = function (element) {\n    var codeStyles = getStyles(element);\n    var whiteSpace = codeStyles['white-space'];\n\n    if (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {\n      var codeElement = element.querySelector('code');\n      var lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n      var lineNumberSizer = element.querySelector('.line-numbers-sizer');\n      var codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n      if (!lineNumberSizer) {\n        lineNumberSizer = document.createElement('span');\n        lineNumberSizer.className = 'line-numbers-sizer';\n        codeElement.appendChild(lineNumberSizer);\n      }\n\n      lineNumberSizer.style.display = 'block';\n      codeLines.forEach(function (line, lineNumber) {\n        lineNumberSizer.textContent = line || '\\n';\n        var lineSize = lineNumberSizer.getBoundingClientRect().height;\n        lineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';\n      });\n      lineNumberSizer.textContent = '';\n      lineNumberSizer.style.display = 'none';\n    }\n  };\n  /**\n   * Returns style declarations for the element\n   * @param {Element} element\n   */\n\n\n  var getStyles = function (element) {\n    if (!element) {\n      return null;\n    }\n\n    return window.getComputedStyle ? getComputedStyle(element) : element.currentStyle || null;\n  };\n\n  window.addEventListener('resize', function () {\n    Array.prototype.forEach.call(document.querySelectorAll('pre.' + PLUGIN_NAME), _resizeElement);\n  });\n  Prism.hooks.add('complete', function (env) {\n    if (!env.code) {\n      return;\n    } // works only for <code> wrapped inside <pre> (not inline)\n\n\n    var pre = env.element.parentNode;\n    var clsReg = /\\s*\\bline-numbers\\b\\s*/;\n\n    if (!pre || !/pre/i.test(pre.nodeName) || // Abort only if nor the <pre> nor the <code> have the class\n    !clsReg.test(pre.className) && !clsReg.test(env.element.className)) {\n      return;\n    }\n\n    if (env.element.querySelector('.line-numbers-rows')) {\n      // Abort if line numbers already exists\n      return;\n    }\n\n    if (clsReg.test(env.element.className)) {\n      // Remove the class 'line-numbers' from the <code>\n      env.element.className = env.element.className.replace(clsReg, ' ');\n    }\n\n    if (!clsReg.test(pre.className)) {\n      // Add the class 'line-numbers' to the <pre>\n      pre.className += ' line-numbers';\n    }\n\n    var match = env.code.match(NEW_LINE_EXP);\n    var linesNum = match ? match.length + 1 : 1;\n    var lineNumbersWrapper;\n    var lines = new Array(linesNum + 1);\n    lines = lines.join('<span></span>');\n    lineNumbersWrapper = document.createElement('span');\n    lineNumbersWrapper.setAttribute('aria-hidden', 'true');\n    lineNumbersWrapper.className = 'line-numbers-rows';\n    lineNumbersWrapper.innerHTML = lines;\n\n    if (pre.hasAttribute('data-start')) {\n      pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n    }\n\n    env.element.appendChild(lineNumbersWrapper);\n\n    _resizeElement(pre);\n\n    Prism.hooks.run('line-numbers', env);\n  });\n  Prism.hooks.add('line-numbers', function (env) {\n    env.plugins = env.plugins || {};\n    env.plugins.lineNumbers = true;\n  });\n  /**\n   * Global exports\n   */\n\n  Prism.plugins.lineNumbers = {\n    /**\n     * Get node for provided line number\n     * @param {Element} element pre element\n     * @param {Number} number line number\n     * @return {Element|undefined}\n     */\n    getLine: function (element, number) {\n      if (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n        return;\n      }\n\n      var lineNumberRows = element.querySelector('.line-numbers-rows');\n      var lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n      var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n      if (number < lineNumberStart) {\n        number = lineNumberStart;\n      }\n\n      if (number > lineNumberEnd) {\n        number = lineNumberEnd;\n      }\n\n      var lineIndex = number - lineNumberStart;\n      return lineNumberRows.children[lineIndex];\n    }\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}