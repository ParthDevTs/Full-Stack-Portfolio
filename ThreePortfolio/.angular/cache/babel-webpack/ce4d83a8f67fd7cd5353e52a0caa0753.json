{"ast":null,"code":"// import * as THREE from 'three';\nimport anime from 'animejs/lib/anime.es.js';\nimport { slideInAnimation } from './animation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(viewportScroller) {\n      this.viewportScroller = viewportScroller;\n      this.title = 'ThreePortfolio';\n      this.myStyle = {};\n      this.myParams = {};\n      this.width = 100;\n      this.height = 100;\n    }\n\n    ngOnInit() {\n      // this.main();\n      this.scrollDown();\n      this.particles();\n    }\n\n    particles() {\n      this.myStyle = {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        'z-index': 0,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      };\n      this.myParams = {\n        particles: {\n          number: {\n            value: 250,\n            density: {\n              enable: true,\n              value_area: 1000\n            }\n          },\n          color: {\n            value: '#fff'\n          },\n          shape: {\n            type: 'circle',\n            stroke: {\n              width: 0,\n              color: '#000000'\n            },\n            polygon: {\n              nb_sides: 5\n            },\n            image: {\n              src: '',\n              width: 100,\n              height: 100\n            }\n          },\n          opacity: {\n            value: 0.5,\n            random: true,\n            anim: {\n              enable: false,\n              speed: 1,\n              opacity_min: 0.1,\n              sync: false\n            }\n          },\n          size: {\n            value: 10,\n            random: true,\n            anim: {\n              enable: true,\n              speed: 5,\n              size_min: 0.1,\n              sync: false\n            }\n          },\n          line_linked: {\n            enable: false,\n            distance: 500,\n            color: '#ffffff',\n            opacity: 0.4,\n            width: 2\n          },\n          move: {\n            enable: true,\n            speed: 10,\n            direction: 'bottom',\n            random: true,\n            straight: true,\n            out_mode: 'out',\n            bounce: false,\n            attract: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 1200\n            }\n          }\n        },\n        interactivity: {\n          detect_on: 'window',\n          events: {\n            onhover: {\n              enable: true,\n              mode: 'bubble'\n            },\n            onclick: {\n              enable: true,\n              mode: 'repulse'\n            },\n            resize: true\n          },\n          modes: {\n            grab: {\n              distance: 371.6075823929928,\n              line_linked: {\n                opacity: 0.16996754429273284\n              }\n            },\n            bubble: {\n              distance: 243.00549192411756,\n              size: 4.1,\n              duration: 0.16200366128274507,\n              opacity: 1,\n              speed: 3\n            },\n            repulse: {\n              distance: 127.86497458683624,\n              duration: 0.4\n            },\n            push: {\n              particles_nb: 4\n            },\n            remove: {\n              particles_nb: 2\n            }\n          }\n        },\n        retina_detect: true\n      };\n    } // main() {\n    //   //Loader\n    //   const textureLoader = new THREE.TextureLoader();\n    //   const normalTexture = textureLoader.load('/assets/normalMap.png');\n    //   //Debug\n    //   //const gui = new GUI();\n    //   // Canvas\n    //   const canvas: any = document.querySelector('#canvas');\n    //   // Scene\n    //   const scene = new THREE.Scene();\n    //   // Objects\n    //   const geometry = new THREE.SphereBufferGeometry(0.5, 30, 30);\n    //   // Materials\n    //   const material = new THREE.MeshStandardMaterial();\n    //   material.metalness = 0.9;\n    //   material.roughness = 0.2;\n    //   // material.color = new THREE.Color(0x292929);\n    //   material.normalMap = normalTexture;\n    //   // Mesh\n    //   const sphere = new THREE.Mesh(geometry, material);\n    //   scene.add(sphere);\n    //   // Lights\n    //   //light1\n    //   const pointLight = new THREE.PointLight(0xffffff, 0.1);\n    //   pointLight.position.x = 2;\n    //   pointLight.position.y = 3;\n    //   pointLight.position.z = 4;\n    //   scene.add(pointLight);\n    //   //Light 2\n    //   const pointLight2 = new THREE.PointLight(0xff0000);\n    //   pointLight2.position.set(-0.73, 1.4, -0.27);\n    //   pointLight2.intensity = 0.4;\n    //   scene.add(pointLight2);\n    //   //Light3\n    //   const pointLight3 = new THREE.PointLight(0x3241df);\n    //   pointLight3.position.set(0.73, -1.4, 0.27);\n    //   pointLight3.intensity = 0.6;\n    //   scene.add(pointLight3);\n    //   //GUI helper Setup\n    //   // const light2 = gui.addFolder('Light 2');\n    //   // light2.add(pointLight3.position, 'x').min(-3).max(3).step(0.01);\n    //   // light2.add(pointLight3.position, 'y').min(-6).max(6).step(0.01);\n    //   // light2.add(pointLight3.position, 'z').min(-3).max(3).step(0.01);\n    //   // light2.add(pointLight3, 'intensity').min(-3).max(3).step(0.01);\n    //   // const light2Color = {\n    //   //   color: 0xff0000,\n    //   // };\n    //   // light2\n    //   //   .addColor(light2Color, 'color')\n    //   //   .onChange(() => pointLight3.color.set(light2Color.color));\n    //   // const pointLightHelper2 = new THREE.PointLightHelper(pointLight3, 0.3);\n    //   // scene.add(pointLightHelper2);\n    //   /**\n    //    * Sizes\n    //    */\n    //   const sizes = {\n    //     width: window.innerWidth,\n    //     height: window.innerHeight,\n    //   };\n    //   window.addEventListener('resize', () => {\n    //     // Update sizes\n    //     sizes.width = window.innerWidth;\n    //     sizes.height = window.innerHeight;\n    //     // Update camera\n    //     camera.aspect = sizes.width / sizes.height;\n    //     camera.updateProjectionMatrix();\n    //     // Update renderer\n    //     renderer.setSize(sizes.width, sizes.height);\n    //     renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    //   });\n    //   /**\n    //    * Camera\n    //    */\n    //   // Base camera\n    //   const camera = new THREE.PerspectiveCamera(\n    //     75,\n    //     sizes.width / sizes.height,\n    //     0.1,\n    //     100\n    //   );\n    //   camera.position.x = 0;\n    //   camera.position.y = 0;\n    //   camera.position.z = 2;\n    //   scene.add(camera);\n    //   // Controls\n    //   // const controls = new OrbitControls(camera, canvas)\n    //   // controls.enableDamping = true\n    //   /**\n    //    * Renderer\n    //    */\n    //   const renderer = new THREE.WebGL1Renderer({\n    //     canvas: canvas,\n    //     alpha: true,\n    //   });\n    //   renderer.setSize(sizes.width, sizes.height);\n    //   renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    //   /**\n    //    * Animate\n    //    */\n    //   let mouseX = 0;\n    //   let mouseY = 0;\n    //   let targetX = 0;\n    //   let targetY = 0;\n    //   const windowHalfX = window.innerWidth / 2;\n    //   const windowHalfY = window.innerHeight / 2;\n    //   document.addEventListener('mousemove', onDocumentMouseMove);\n    //   function onDocumentMouseMove(event) {\n    //     mouseX = event.clientX - windowHalfX;\n    //     mouseY = event.clientY - windowHalfY;\n    //   }\n    //   const updateSphere = (event) => {\n    //     sphere.position.y = window.scrollY * 0.004;\n    //   };\n    //   window.addEventListener('scroll', updateSphere);\n    //   const clock = new THREE.Clock();\n    //   const tick = () => {\n    //     const elapsedTime = clock.getElapsedTime();\n    //     targetX = mouseX * 0.001;\n    //     targetY = mouseY * 0.001;\n    //     // Update objects\n    //     sphere.rotation.y = 0.7 * elapsedTime;\n    //     sphere.rotation.y += 0.1 * (targetX - sphere.rotation.y);\n    //     sphere.rotation.x += 0.21 * (targetY - sphere.rotation.x);\n    //     sphere.position.z += -0.16 * (targetY - sphere.rotation.x);\n    //     // Update Orbital Controls\n    //     // controls.update()\n    //     // Render\n    //     renderer.render(scene, camera);\n    //     // Call tick again on the next frame\n    //     window.requestAnimationFrame(tick);\n    //   };\n    //   tick();\n    // }\n\n\n    scrollDown() {\n      anime.timeline({\n        loop: true\n      }).add({\n        targets: '.scrollDown',\n        translateY: 60,\n        easing: 'easeInOutQuad',\n        duration: 400\n      }).add({\n        targets: '.scrollDown',\n        translateY: 0,\n        duration: 1000\n      });\n    }\n\n    scroll() {\n      this.viewportScroller.scrollToAnchor('first');\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ViewportScroller));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 11,\n    vars: 5,\n    consts: [[1, \"containers\"], [1, \"display-1\"], [3, \"params\", \"width\", \"height\"], [1, \"scrollDown\"], [1, \"scroll-down\", 3, \"click\"], [\"id\", \"first\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"p\", 1);\n        i0.ɵɵtext(2, \"The Portfolio.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"particles\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"mat-icon\");\n        i0.ɵɵtext(6, \"arrow_downward\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"a\", 4);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_7_listener() {\n          return ctx.scroll();\n        });\n        i0.ɵɵtext(8, \"Click Me\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"section\", 5);\n        i0.ɵɵelement(10, \"app-default\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵstyleMap(ctx.myStyle);\n        i0.ɵɵproperty(\"params\", ctx.myParams)(\"width\", ctx.width)(\"height\", ctx.height);\n      }\n    },\n    styles: [\"@import\\\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@1,100&family=Press+Start+2P&display=swap\\\";.containers[_ngcontent-%COMP%]{height:100vh;display:flex;align-items:center;justify-content:center;position:relative;content-visibility:auto;overflow-y:hidden}section[_ngcontent-%COMP%]{height:100vh}p[_ngcontent-%COMP%]{z-index:2;display:inline-block;text-decoration:none;padding:.25em 1em;text-transform:uppercase;color:#2bf5da;border:currentColor .125em solid;position:relative;text-shadow:currentColor;border-radius:.25em;text-shadow:0 0 .125em hsl(0 0% 100%/.3),0 0 .45em currentColor;box-shadow:0 0 .5em #2bf5da,inset 0 0 .5em #2bf5da;transition:all .5s ease-in-out}p[_ngcontent-%COMP%]:hover{background-color:#2bf5da1e}p[_ngcontent-%COMP%]:before{content:\\\"\\\";background-color:#2bf5da;position:absolute;left:0%;top:120%;width:100%;height:100%;transform:perspective(1em) rotateX(40deg) scaleY(.35);filter:blur(1.6em);pointer-events:none;opacity:.6;transition:all .5s ease-in-out}p[_ngcontent-%COMP%]:hover:before{opacity:1}p[_ngcontent-%COMP%]:after{content:\\\"\\\";top:0;left:0;width:100%;height:100%;position:absolute;box-shadow:0 0 0 1.5em .8em #2bf5da;opacity:0;transition:.5s ease-in-out all}p[_ngcontent-%COMP%]:hover:after{opacity:1}.ml15[_ngcontent-%COMP%]{font-weight:200;font-size:2em;text-transform:uppercase;letter-spacing:.3em}.ml15[_ngcontent-%COMP%]   .word[_ngcontent-%COMP%]{display:inline-block;line-height:1em}.word[_ngcontent-%COMP%]{padding:4px}.scrollDown[_ngcontent-%COMP%]{position:absolute;top:80%;color:#fff;font-weight:200;font-size:1em;text-transform:uppercase;letter-spacing:.1em}.scroll-down[_ngcontent-%COMP%]{position:absolute;top:75%;left:50%;transform:translate(-50%);text-decoration:none;color:#fff;font-family:\\\"Press Start 2P\\\",cursive;transition:all .2s cubic-bezier();-webkit-user-select:none;user-select:none;font-size:1.2em;z-index:0;cursor:pointer}.scroll-down[_ngcontent-%COMP%]:hover{text-shadow:2px 2px 1px red,3px 3px 5px rgb(3,3,255);font-size:1.3em}\"],\n    data: {\n      animation: [slideInAnimation]\n    },\n    changeDetection: 0\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}