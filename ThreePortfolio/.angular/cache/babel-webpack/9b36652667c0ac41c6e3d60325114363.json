{"ast":null,"code":"(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n\n  var callbacks = [];\n  var map = {};\n\n  var noop = function () {};\n\n  Prism.plugins.toolbar = {};\n  /**\n   * Register a button callback with the toolbar.\n   *\n   * @param {string} key\n   * @param {Object|Function} opts\n   */\n\n  var registerButton = Prism.plugins.toolbar.registerButton = function (key, opts) {\n    var callback;\n\n    if (typeof opts === 'function') {\n      callback = opts;\n    } else {\n      callback = function (env) {\n        var element;\n\n        if (typeof opts.onClick === 'function') {\n          element = document.createElement('button');\n          element.type = 'button';\n          element.addEventListener('click', function () {\n            opts.onClick.call(this, env);\n          });\n        } else if (typeof opts.url === 'string') {\n          element = document.createElement('a');\n          element.href = opts.url;\n        } else {\n          element = document.createElement('span');\n        }\n\n        element.textContent = opts.text;\n        return element;\n      };\n    }\n\n    callbacks.push(map[key] = callback);\n  };\n  /**\n   * Post-highlight Prism hook callback.\n   *\n   * @param env\n   */\n\n\n  var hook = Prism.plugins.toolbar.hook = function (env) {\n    // Check if inline or actual code block (credit to line-numbers plugin)\n    var pre = env.element.parentNode;\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    } // Autoloader rehighlights, so only do this once.\n\n\n    if (pre.parentNode.classList.contains('code-toolbar')) {\n      return;\n    } // Create wrapper for <pre> to prevent scrolling toolbar with content\n\n\n    var wrapper = document.createElement(\"div\");\n    wrapper.classList.add(\"code-toolbar\");\n    pre.parentNode.insertBefore(wrapper, pre);\n    wrapper.appendChild(pre); // Setup the toolbar\n\n    var toolbar = document.createElement('div');\n    toolbar.classList.add('toolbar');\n\n    if (document.body.hasAttribute('data-toolbar-order')) {\n      callbacks = document.body.getAttribute('data-toolbar-order').split(',').map(function (key) {\n        return map[key] || noop;\n      });\n    }\n\n    callbacks.forEach(function (callback) {\n      var element = callback(env);\n\n      if (!element) {\n        return;\n      }\n\n      var item = document.createElement('div');\n      item.classList.add('toolbar-item');\n      item.appendChild(element);\n      toolbar.appendChild(item);\n    }); // Add our toolbar to the currently created wrapper of <pre> tag\n\n    wrapper.appendChild(toolbar);\n  };\n\n  registerButton('label', function (env) {\n    var pre = env.element.parentNode;\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    }\n\n    if (!pre.hasAttribute('data-label')) {\n      return;\n    }\n\n    var element, template;\n    var text = pre.getAttribute('data-label');\n\n    try {\n      // Any normal text will blow up this selector.\n      template = document.querySelector('template#' + text);\n    } catch (e) {}\n\n    if (template) {\n      element = template.content;\n    } else {\n      if (pre.hasAttribute('data-url')) {\n        element = document.createElement('a');\n        element.href = pre.getAttribute('data-url');\n      } else {\n        element = document.createElement('span');\n      }\n\n      element.textContent = text;\n    }\n\n    return element;\n  });\n  /**\n   * Register the toolbar with Prism.\n   */\n\n  Prism.hooks.add('complete', hook);\n})();","map":null,"metadata":{},"sourceType":"script"}