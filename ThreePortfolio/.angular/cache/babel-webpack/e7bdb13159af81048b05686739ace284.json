{"ast":null,"code":"!function () {\n  function e(e) {\n    this.defaults = r({}, e);\n  }\n\n  function n(e) {\n    return e.replace(/-(\\w)/g, function (e, n) {\n      return n.toUpperCase();\n    });\n  }\n\n  function t(e) {\n    for (var n = 0, t = 0; t < e.length; ++t) e.charCodeAt(t) == \"\t\".charCodeAt(0) && (n += 3);\n\n    return e.length + n;\n  }\n\n  var r = Object.assign || function (e, n) {\n    for (var t in n) n.hasOwnProperty(t) && (e[t] = n[t]);\n\n    return e;\n  };\n\n  e.prototype = {\n    setDefaults: function (e) {\n      this.defaults = r(this.defaults, e);\n    },\n    normalize: function (e, t) {\n      t = r(this.defaults, t);\n\n      for (var i in t) {\n        var o = n(i);\n        \"normalize\" !== i && \"setDefaults\" !== o && t[i] && this[o] && (e = this[o].call(this, e, t[i]));\n      }\n\n      return e;\n    },\n    leftTrim: function (e) {\n      return e.replace(/^\\s+/, \"\");\n    },\n    rightTrim: function (e) {\n      return e.replace(/\\s+$/, \"\");\n    },\n    tabsToSpaces: function (e, n) {\n      return n = 0 | n || 4, e.replace(/\\t/g, new Array(++n).join(\" \"));\n    },\n    spacesToTabs: function (e, n) {\n      return n = 0 | n || 4, e.replace(new RegExp(\" {\" + n + \"}\", \"g\"), \"\t\");\n    },\n    removeTrailing: function (e) {\n      return e.replace(/\\s*?$/gm, \"\");\n    },\n    removeInitialLineFeed: function (e) {\n      return e.replace(/^(?:\\r?\\n|\\r)/, \"\");\n    },\n    removeIndent: function (e) {\n      var n = e.match(/^[^\\S\\n\\r]*(?=\\S)/gm);\n      return n && n[0].length ? (n.sort(function (e, n) {\n        return e.length - n.length;\n      }), n[0].length ? e.replace(new RegExp(\"^\" + n[0], \"gm\"), \"\") : e) : e;\n    },\n    indent: function (e, n) {\n      return e.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++n).join(\"\t\") + \"$&\");\n    },\n    breakLines: function (e, n) {\n      n = n === !0 ? 80 : 0 | n || 80;\n\n      for (var r = e.split(\"\\n\"), i = 0; i < r.length; ++i) if (!(t(r[i]) <= n)) {\n        for (var o = r[i].split(/(\\s+)/g), a = 0, s = 0; s < o.length; ++s) {\n          var l = t(o[s]);\n          a += l, a > n && (o[s] = \"\\n\" + o[s], a = l);\n        }\n\n        r[i] = o.join(\"\");\n      }\n\n      return r.join(\"\\n\");\n    }\n  }, \"undefined\" != typeof module && module.exports && (module.exports = e), \"undefined\" != typeof Prism && (Prism.plugins.NormalizeWhitespace = new e({\n    \"remove-trailing\": !0,\n    \"remove-indent\": !0,\n    \"left-trim\": !0,\n    \"right-trim\": !0\n  }), Prism.hooks.add(\"before-sanity-check\", function (e) {\n    var n = Prism.plugins.NormalizeWhitespace;\n\n    if (!e.settings || e.settings[\"whitespace-normalization\"] !== !1) {\n      if ((!e.element || !e.element.parentNode) && e.code) return e.code = n.normalize(e.code, e.settings), void 0;\n      var t = e.element.parentNode,\n          r = /\\bno-whitespace-normalization\\b/;\n\n      if (e.code && t && \"pre\" === t.nodeName.toLowerCase() && !r.test(t.className) && !r.test(e.element.className)) {\n        for (var i = t.childNodes, o = \"\", a = \"\", s = !1, l = 0; l < i.length; ++l) {\n          var c = i[l];\n          c == e.element ? s = !0 : \"#text\" === c.nodeName && (s ? a += c.nodeValue : o += c.nodeValue, t.removeChild(c), --l);\n        }\n\n        if (e.element.children.length && Prism.plugins.KeepMarkup) {\n          var u = o + e.element.innerHTML + a;\n          e.element.innerHTML = n.normalize(u, e.settings), e.code = e.element.textContent;\n        } else e.code = o + e.code + a, e.code = n.normalize(e.code, e.settings);\n      }\n    }\n  }));\n}();","map":null,"metadata":{},"sourceType":"script"}